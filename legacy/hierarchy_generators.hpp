#ifndef HIERACHY_GEN_H
#define HIERACHY_GEN_H

#include "typelist.hpp"

// scattered hierarchy
template <class TList, template <class> class Unit>
class GenScatterHierarchy;

template <class Head, class Tail, template <class> class Unit>
class GenScatterHierarchy<TypeList<Head, Tail>, Unit> : public GenScatterHierarchy<Head, Unit>, public GenScatterHierarchy<Tail, Unit>
{
};

template <class T, template <class> class Unit>
class GenScatterHierarchy : public Unit<T>
{
};

template <template <class> class Unit>
class GenScatterHierarchy<NullType, Unit>
{
};

// example 
template <class T>
class Holder
{
public:
    T value;
};

typedef GenScatterHierarchy<TYPELIST_3(int, float, double), Holder> HolderWidget;

// linear hierarchy
class EmptyType {};

template <class TList, template <class Type, class Base> class Unit, class Root = EmptyType>
class GenLinearHierarchy;

template <class Head, class Tail, template <class, class> class Unit, class Root>
class GenLinearHierarchy<TypeList<Head, Tail>, Unit, Root> : public Unit<Head, GenLinearHierarchy<Tail, Unit, Root>>
{
};

template <class T, template <class, class> class Unit, class Root>
class GenLinearHierarchy<TypeList<T, NullType>, Unit, Root> : public Unit<T, Root>
{
};

// example
template <class T, class Base>
class EventHandler : public Base  // Unit class template must inherit from Base template type parameter
{
public:
    void HandleEvent(const T&) override {}  // usually GeLinearaHierarchy is used to implement interfaces generated by GenScatterHierarchy
};

typedef GenLinearHierarchy<TYPELIST_3(int, double, float), EventHandler> EventHandlerWidget;

#endif // HIERACHY_GEN_H